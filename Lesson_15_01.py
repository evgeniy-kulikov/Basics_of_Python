# Lesson_15

import math

# 1  задание
# Даны два списка фруктов. Получить список фруктов, присутствующих в обоих исходных списках
# Примечание: Списки фруктов создайте вручную в начале файла
print('* * * 1 задание * * *\n')

fruits_1 = ['apple', 'banana', 'orange', 'kiwi', 'pear']
fruits_2 = ['banana', 'kiwi', 'tangerine']

# обычный способ
result = []

for k in fruits_1:
    if k in fruits_2:
        result.append(k)
print(result)

# используется генератор
result = [k for k in fruits_1 if k in fruits_2]
print(result)
#
# ____________________________________________________________________________________
# 2  задание
#
# Дан список, заполненный произвольными числами. Получить список из элементов исходного,
# удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно
print('\n* * * 2 задание * * *\n')

numbers = [1, 48, -9, 10, 27, 8, 17, 45, 100, 11, -7, 12, -27, 24]
result = [k for k in numbers if k > 0 and k % 3 == 0 and k % 4 != 0]
print(result)
#
# ____________________________________________________________________________________
# 3  задание
#
# Напишите функцию которая принимает на вход список. Функция создает из этого списка новый список
# из квадратных корней чисел (если число положительное) и самих чисел (если число отрицательное)
# и возвращает результат (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
print('\n* * * 3 задание * * *')

# стандартный способ
print('\nстандартный способ')
old_list = [-1, 1, -2, 2, -4, 5, -6, -7, 8, -9, -10]


def new_sqrt_list(input_list):
    # input_list = input_list[:]  # работаем с копией списка
    input_list = input_list.copy()  # работаем с копией списка
    for i in range(len(input_list)):
        number = input_list[i]
        if number > 0:
            input_list[i] = math.sqrt(number)
    return input_list


print(old_list)
result = new_sqrt_list(old_list)
print(result)


# используется генератор
print('\nиспользуется генератор')


def new_sqrt_gen(input_list):
    # result = [math.sqrt(i) for i in input_list if i > 0]  # пропадают отрицательные числа
    result = [math.sqrt(i) if i > 0 else i for i in input_list]
#           |-результат 1-||-если-||---------  иначе  ---------|    # в генераторе используется тернарный оператор
    return result


print(old_list)
result_new = new_sqrt_gen(result)
print(result_new)
# ____________________________________________________________________________________
# 4 задание
#
# Написать функцию которая принимает на вход число от 1 до 100. Если число равно 13,
# функция поднимает исключительную ситуации ValueError иначе возвращает введенное число, возведенное в квадрат.
# Далее написать основной код программы. Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат,
# который вернула функция. Обработать возможность возникновения исключительной ситуации,
# которая поднимается внутри функции
print('\n* * * 4 задание * * *\n')


def unlucky_number(number):
    if number == 13:
        raise ValueError('Несчастливое число!')  # обрабатываем конкретную исключительную ситуацию
    else:
        return number**2


number = int(input('Введите число: '))
# т.к. возможна "исключительная ситуация" то в код добавляем "Обработку исключений"
try:
    result = unlucky_number(number)
except ValueError:  # в случае исключительной ситуации
    print('У вас несчастливое число!')
else:
    print('Квадрат вашего числа: ', result)
